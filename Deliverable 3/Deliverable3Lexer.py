# Generated from Deliverable3.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
        1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
        5,32,189,8,32,10,32,12,32,192,9,32,1,33,3,33,195,8,33,1,33,4,33,
        198,8,33,11,33,12,33,199,1,33,1,33,4,33,204,8,33,11,33,12,33,205,
        3,33,208,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
        219,8,34,1,35,1,35,5,35,223,8,35,10,35,12,35,226,9,35,1,35,1,35,
        1,35,5,35,231,8,35,10,35,12,35,234,9,35,1,35,3,35,237,8,35,1,36,
        4,36,240,8,36,11,36,12,36,241,1,36,1,36,1,37,4,37,247,8,37,11,37,
        12,37,248,1,38,1,38,5,38,253,8,38,10,38,12,38,256,9,38,1,38,1,38,
        1,39,1,39,1,39,1,39,1,39,5,39,265,8,39,10,39,12,39,268,9,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,278,8,39,10,39,12,39,281,
        9,39,1,39,1,39,1,39,3,39,286,8,39,1,39,1,39,1,40,3,40,291,8,40,1,
        40,1,40,1,40,1,40,1,41,4,41,298,8,41,11,41,12,41,299,1,41,1,41,1,
        42,4,42,305,8,42,11,42,12,42,306,1,42,1,42,1,43,4,43,312,8,43,11,
        43,12,43,313,1,43,1,43,4,224,232,266,279,0,44,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,1,0,7,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,1,0,
        9,9,2,0,10,10,13,13,1,0,32,32,335,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,91,1,0,0,0,5,94,1,0,0,0,7,97,1,0,
        0,0,9,100,1,0,0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,
        109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,115,1,0,0,0,25,117,
        1,0,0,0,27,119,1,0,0,0,29,121,1,0,0,0,31,123,1,0,0,0,33,126,1,0,
        0,0,35,128,1,0,0,0,37,133,1,0,0,0,39,138,1,0,0,0,41,144,1,0,0,0,
        43,148,1,0,0,0,45,151,1,0,0,0,47,155,1,0,0,0,49,158,1,0,0,0,51,164,
        1,0,0,0,53,166,1,0,0,0,55,169,1,0,0,0,57,171,1,0,0,0,59,174,1,0,
        0,0,61,177,1,0,0,0,63,180,1,0,0,0,65,186,1,0,0,0,67,194,1,0,0,0,
        69,218,1,0,0,0,71,236,1,0,0,0,73,239,1,0,0,0,75,246,1,0,0,0,77,250,
        1,0,0,0,79,285,1,0,0,0,81,290,1,0,0,0,83,297,1,0,0,0,85,304,1,0,
        0,0,87,311,1,0,0,0,89,90,5,61,0,0,90,2,1,0,0,0,91,92,5,43,0,0,92,
        93,5,61,0,0,93,4,1,0,0,0,94,95,5,45,0,0,95,96,5,61,0,0,96,6,1,0,
        0,0,97,98,5,42,0,0,98,99,5,61,0,0,99,8,1,0,0,0,100,101,5,47,0,0,
        101,102,5,61,0,0,102,10,1,0,0,0,103,104,5,91,0,0,104,12,1,0,0,0,
        105,106,5,44,0,0,106,14,1,0,0,0,107,108,5,93,0,0,108,16,1,0,0,0,
        109,110,5,43,0,0,110,18,1,0,0,0,111,112,5,45,0,0,112,20,1,0,0,0,
        113,114,5,42,0,0,114,22,1,0,0,0,115,116,5,47,0,0,116,24,1,0,0,0,
        117,118,5,37,0,0,118,26,1,0,0,0,119,120,5,40,0,0,120,28,1,0,0,0,
        121,122,5,41,0,0,122,30,1,0,0,0,123,124,5,105,0,0,124,125,5,102,
        0,0,125,32,1,0,0,0,126,127,5,58,0,0,127,34,1,0,0,0,128,129,5,101,
        0,0,129,130,5,108,0,0,130,131,5,105,0,0,131,132,5,102,0,0,132,36,
        1,0,0,0,133,134,5,101,0,0,134,135,5,108,0,0,135,136,5,115,0,0,136,
        137,5,101,0,0,137,38,1,0,0,0,138,139,5,119,0,0,139,140,5,104,0,0,
        140,141,5,105,0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,40,1,0,
        0,0,144,145,5,102,0,0,145,146,5,111,0,0,146,147,5,114,0,0,147,42,
        1,0,0,0,148,149,5,105,0,0,149,150,5,110,0,0,150,44,1,0,0,0,151,152,
        5,97,0,0,152,153,5,110,0,0,153,154,5,100,0,0,154,46,1,0,0,0,155,
        156,5,111,0,0,156,157,5,114,0,0,157,48,1,0,0,0,158,159,5,40,0,0,
        159,160,5,110,0,0,160,161,5,111,0,0,161,162,5,116,0,0,162,163,5,
        32,0,0,163,50,1,0,0,0,164,165,5,60,0,0,165,52,1,0,0,0,166,167,5,
        60,0,0,167,168,5,61,0,0,168,54,1,0,0,0,169,170,5,62,0,0,170,56,1,
        0,0,0,171,172,5,62,0,0,172,173,5,61,0,0,173,58,1,0,0,0,174,175,5,
        61,0,0,175,176,5,61,0,0,176,60,1,0,0,0,177,178,5,33,0,0,178,179,
        5,61,0,0,179,62,1,0,0,0,180,181,5,114,0,0,181,182,5,97,0,0,182,183,
        5,110,0,0,183,184,5,103,0,0,184,185,5,101,0,0,185,64,1,0,0,0,186,
        190,7,0,0,0,187,189,7,1,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,
        188,1,0,0,0,190,191,1,0,0,0,191,66,1,0,0,0,192,190,1,0,0,0,193,195,
        5,45,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,198,
        7,2,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,
        1,0,0,0,200,207,1,0,0,0,201,203,5,46,0,0,202,204,7,2,0,0,203,202,
        1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,
        1,0,0,0,207,201,1,0,0,0,207,208,1,0,0,0,208,68,1,0,0,0,209,210,5,
        84,0,0,210,211,5,114,0,0,211,212,5,117,0,0,212,219,5,101,0,0,213,
        214,5,70,0,0,214,215,5,97,0,0,215,216,5,108,0,0,216,217,5,115,0,
        0,217,219,5,101,0,0,218,209,1,0,0,0,218,213,1,0,0,0,219,70,1,0,0,
        0,220,224,5,34,0,0,221,223,9,0,0,0,222,221,1,0,0,0,223,226,1,0,0,
        0,224,225,1,0,0,0,224,222,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,
        0,227,237,5,34,0,0,228,232,5,39,0,0,229,231,9,0,0,0,230,229,1,0,
        0,0,231,234,1,0,0,0,232,233,1,0,0,0,232,230,1,0,0,0,233,235,1,0,
        0,0,234,232,1,0,0,0,235,237,5,39,0,0,236,220,1,0,0,0,236,228,1,0,
        0,0,237,72,1,0,0,0,238,240,7,3,0,0,239,238,1,0,0,0,240,241,1,0,0,
        0,241,239,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,6,36,0,
        0,244,74,1,0,0,0,245,247,7,4,0,0,246,245,1,0,0,0,247,248,1,0,0,0,
        248,246,1,0,0,0,248,249,1,0,0,0,249,76,1,0,0,0,250,254,5,35,0,0,
        251,253,8,5,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,
        254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,6,38,0,0,
        258,78,1,0,0,0,259,260,5,39,0,0,260,261,5,39,0,0,261,262,5,39,0,
        0,262,266,1,0,0,0,263,265,9,0,0,0,264,263,1,0,0,0,265,268,1,0,0,
        0,266,267,1,0,0,0,266,264,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,
        0,269,270,5,39,0,0,270,271,5,39,0,0,271,286,5,39,0,0,272,273,5,34,
        0,0,273,274,5,34,0,0,274,275,5,34,0,0,275,279,1,0,0,0,276,278,9,
        0,0,0,277,276,1,0,0,0,278,281,1,0,0,0,279,280,1,0,0,0,279,277,1,
        0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,34,0,0,283,284,5,
        34,0,0,284,286,5,34,0,0,285,259,1,0,0,0,285,272,1,0,0,0,286,287,
        1,0,0,0,287,288,6,39,0,0,288,80,1,0,0,0,289,291,5,13,0,0,290,289,
        1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,10,0,0,293,294,
        1,0,0,0,294,295,6,40,1,0,295,82,1,0,0,0,296,298,3,87,43,0,297,296,
        1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,301,
        1,0,0,0,301,302,4,41,0,0,302,84,1,0,0,0,303,305,3,87,43,0,304,303,
        1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,
        1,0,0,0,308,309,4,42,1,0,309,86,1,0,0,0,310,312,7,6,0,0,311,310,
        1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,315,
        1,0,0,0,315,316,6,43,1,0,316,88,1,0,0,0,20,0,190,194,199,205,207,
        218,224,232,236,241,248,254,266,279,285,290,299,306,313,2,6,0,0,
        0,1,0
    ]

class Deliverable3Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    VARNAME = 33
    NUMBER = 34
    BOOLEAN = 35
    STRING = 36
    WS = 37
    TAB = 38
    COMMENT = 39
    BLOCK_COMMENT = 40
    NEWLINE = 41
    INDENT = 42
    DEDENT = 43
    SPACES = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+='", "'-='", "'*='", "'/='", "'['", "','", "']'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'if'", "':'", 
            "'elif'", "'else'", "'while'", "'for'", "'in'", "'and'", "'or'", 
            "'(not '", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'range'" ]

    symbolicNames = [ "<INVALID>",
            "VARNAME", "NUMBER", "BOOLEAN", "STRING", "WS", "TAB", "COMMENT", 
            "BLOCK_COMMENT", "NEWLINE", "INDENT", "DEDENT", "SPACES" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "VARNAME", "NUMBER", "BOOLEAN", "STRING", "WS", "TAB", 
                  "COMMENT", "BLOCK_COMMENT", "NEWLINE", "INDENT", "DEDENT", 
                  "SPACES" ]

    grammarFileName = "Deliverable3.g4"

    def __init__(self, input=None, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self._current_level = 0
        self._last_indent = 0
        self._line_indent_map = {}

    def getIndentationLevel(self):
        current_line = self._input.LT(1).line
        if current_line not in self._line_indent_map:
            self._line_indent_map[current_line] = self.calculateIndentationLevel(current_line)
        return self._line_indent_map[current_line]

    def calculateIndentationLevel(self, line_number):
        line_start = self._input.getText(Interval(self._input.getLineStart(line_number), self._input.index()))
        indent_level = len(line_start) - len(line_start.lstrip())
        return indent_level

    def getCurrentLevel(self):
        return self._current_level

    def updateIndentation(self):
        indent_level = self.getIndentationLevel()
        if indent_level > self._current_level:
            self._current_level = indent_level
        elif indent_level < self._current_level:
            self._current_level = indent_level

    def INDENT_sempred(self, localctx: RuleContext, predIndex: int):
        if predIndex == 0:
            return self.getIndentationLevel() > self.getCurrentLevel()

    def DEDENT_sempred(self, localctx: RuleContext, predIndex: int):
        if predIndex == 1:
            return self.getIndentationLevel() < self.getCurrentLevel()

         


